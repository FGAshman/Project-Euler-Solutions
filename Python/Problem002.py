# Problem 2:
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
# the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
# even-valued terms.

# Generate Fibonacci sequence where the values are > 4_000_000 in a list
# x % 2 == 0 for each term to get even numbers
# sum resulting list

def fib(n, limit: int = 4_000_000):
    """Generates the Fibonacci sequence using Python generators to remove the need for slow
       recursive properties.
       Also limits the maximum value (defaults to 4_000_000)"""
    # Defining the first 2 terms of the Fibonacci sequence
    x, y = 0, 1
    for _ in range(n):
        if x < limit:
            yield x
            x, y = y, x + y


def compute():
    sol = sum([i for i in list(fib(100)) if i % 2 == 0])
    return str(sol)


if __name__ == "__main__":
    print(compute())
